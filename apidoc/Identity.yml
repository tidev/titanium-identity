name: Modules.Identity
summary: Allows a Titanium application to use the iOS Touch ID / Face ID authentication mechanism.
platforms: [iphone, ipad, android]
since: {iphone: "6.3.0", ipad: "6.3.0", android: "6.3.0"}
extends: Titanium.Module
description: |
    Touch ID / Face ID are security mechanisms that use biometric sensors to authenticate the user.

    ### Requirements

    The Identity module is available with the Titanium SDK starting with Release 6.3.0.
    This module only works with devices running iOS 8 and later.

    ### Getting Started

    Add the module as a dependency to your application by adding a **`<module>`** item to the
    **`<modules>`** element of your `tiapp.xml` file:

    ``` xml
    <ti:app>
      <!-- ... -->
      <modules>
        <module platform="iphone">ti.identity</module>
      </modules>
      <!-- ... -->
    </ti:app>
    ```

    Use `require()` to access the module from JavaScript:

    ``` javascript
    var Identity = require('ti.identity');
    ```

    The `Identity` variable is a reference to the module. Make API calls using this reference:

    ``` javascript
    Identity.authenticate({
        reason: 'Verify to modify personal settings',
        callback: function(e) {
            Ti.API.info(e);
        }
    });
    ```

    ### Lifetime Notes (iOS-only)

    The current context will, once evaluated, be used until it's instance gets released or invalidated.
    You can you use the <Modules.Identity.invalidate> method to force the user to be prompted every time a
    new authentication is triggered. On iOS 9 and later, this can also be called to cancel a current
    evaluation of an auth-context, e.g. to hide the auth-dialoag.

    ## Distinguish between Touch ID and Face ID

    Use the <Modules.Identity.biometryType> to receive the currently used biometry type. See an example of
    using the property to create a personalized interface when using Touch ID and Face ID:

    ``` javascript
    var authPhrase = 'Unknown';

    if (TiIdentity.biometryType === TiIdentity.BIOMETRY_TYPE_FACE_ID) { // Face ID
        authPhrase = 'Face ID';
    } else if (TiIdentity.biometryType === TiIdentity.BIOMETRY_TYPE_TOUCH_ID) { // Touch ID
        authPhrase = 'Touch ID';
    }
    ```
    ## Face ID Requirements (iOS only)

    For Face ID to work properly, you need to add a **`<key>`** item to the
    **`<plist>`** element of your `tiapp.xml` file:

    ``` xml
    <ti:app>
      <!-- ... -->
      <ios>
        <!-- ... -->
        <plist>
          <dict>
            <key>NSFaceIDUsageDescription</key>
            <string>Why you need Face ID.</string>
          </dict>
        </plist>
        <!-- ... -->
      </ios>
      <!-- ... -->
    </ti:app>
    ```

    ### Native Keychain Integration

    For more infos regarding the keychain integration, check the "KeychainItem" "documentation.

    ### Sample Application

    The module contains a sample application in the
    `<TITANIUM_SDK_HOME>/modules/iphone/ti.identity/<VERSION>/example/` folder.
methods:
  - name: createKeychainItem
    summary: Create KeychainItem.
    parameters:
      - name: params
        summary: Dictionary of arguments passed to the method.
        type: KeychainItemType

  - name: authenticate
    summary: Initiates the biometric authentication process.
    description: |
      A special note for Android:

      When you call this method in Android, it will either authenticate the fingerprint or it will fallback
      to the device's password, pin or pattern which is the case when biometric means of identification is
      not available. If you provide an incorrect fingerprint and receive an error message "Unable to recognize
      fingerprint", do not call authenticate. Instead, get the user to try again. If you call authenticate,
      it will end up in a bad state. This flow will be improved in the next update for Android.
    parameters:
      - name: params
        summary: Dictionary of arguments passed to the method, e.g. the reason to autheicate and the callback.
        type: IdentityAuthenticationType

  - name: invalidate
    summary: Invalidates the current biometric dialog.
    description: |
        The context is invalidated automatically when it is (auto)released.

        This method allows invalidating it manually while it is still in scope.
        Invalidation terminates any existing policy evaluation and the respective call will
        fail with <Modules.Identity.ERROR_APP_CANCELLED>. After the context has been invalidated, it can not be
        used for policy evaluation and an attempt to do so will fail with <Modules.Identity.ERROR_INVALID_CONTEXT>.

        See the "Lifetime Notes (iOS-only)" paragraph in the module paragraph for more infos.
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: deviceCanAuthenticate
    summary: Checks to see if device is configured for biometric authentication.
    description: |
        On Android this takes into account the `authenticationPolicy`.

        Example:

        ``` javascript
        var Identity = require("ti.identity");
        var result = Identity.deviceCanAuthenticate();
        if (!result.canAuthenticate) {
            alert('Message: ' + result.error + '\nCode: ' + result.code);
        } else {
            alert('Device can authenticate');
        }
        ```
    returns:
        type: DeviceCanAuthenticateResult

  - name: isSupported
    summary: Determines if the current device supports Touch ID or Face ID.
    description: |
        This module is only supported on Android 6.0 or newer. So, this method always returns
        `false` on older versions of Android.

    returns:
        type: Boolean

properties:
  - name: authenticationPolicy
    summary: Sets the global authentication policy used in this Touch ID / Face ID context.
    description: |
        You should set this property before checking the availability or
        starting the authentication. By default, `AUTHENTICATION_POLICY_BIOMETRICS`
        will be used to authenticate using the Touch ID / Face ID sensor only. Using the
        `AUTHENTICATION_POLICY_PASSCODE` constant will still try to authenticate
        with Touch ID / Face ID first and use the passcode as the fallback.
    platforms: [iphone, ipad, android]
    since: "6.1.0"
    type: Number
    constants: [Modules.Identity.AUTHENTICATION_POLICY_*]
    default: Modules.Identity.AUTHENTICATION_POLICY_BIOMETRICS

  - name: biometryType
    summary: Indicates the type of the biometry supported by the device.
    description: |
        This property is set only when <Modules.Identity.isSupported> succeeds for a biometric policy.
        The default value is <Modules.Identity.BIOMETRY_TYPE_NONE>.
    platforms: [iphone, ipad]
    since: "6.3.0"
    type: Number
    osver: {ios: {min: "11.0"}}
    permission: read-only
    constants: [Modules.Identity.BIOMETRY_*]
    default: Modules.Identity.BIOMETRY_TYPE_NONE

  - name: AUTHENTICATION_POLICY_PASSCODE
    summary: Device owner was authenticated by Touch ID or device passcode.
    description: |
        Touch ID or passcode authentication is required. If Touch ID is available,
        enrolled and not locked out, user is asked for it first, otherwise they are
        asked to enter device passcode. If passcode is not enabled, policy evaluation
        will fail.

        Touch ID authentication dialog behaves similarly as the one used by
        `AUTHENTICATION_POLICY_BIOMETRICS`. However, instead of "Enter Password"
        button there is "Enter Passcode" button which, when tapped, switches the
        authentication method and allows users to enter device passcode.

        Passcode authentication will get locked after 6 unsuccessful attempts with
        progressively increased backoff delay.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: AUTHENTICATION_POLICY_BIOMETRICS
    summary: Device owner was authenticated using a biometric method.
    description: |
        A biometric authentication is required. If there are no biometrics available or not
        enrolled, policy evaluation will fail. If Touch ID / Face ID is locked out, passcode
        is required as the first step to unlock with Touch ID.

        Touch ID authentication dialog contains a cancel button with default title
        "Cancel" which can be customized using `cancelTitle` property and a fallback
        button with default title "Enter Password" which can be customized using
        `fallbackTitle` property. Fallback button is initially hidden and shows up
        after first unsuccessful Touch ID attempt. Tapping cancel button or fallback
        button causes evaluatePolicy call to fail, returning a distinct error code.

        Biometric authentication will get locked after 5 unsuccessful attempts.
        After that, users have to unlock it by entering passcode.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: hasFaceScanner
    summary: Returns true if the has biometric hardware to perform face authentication
    type: Boolean
    platforms: [android]
    since: "12.1.0"

  - name: hasIrisScanner
    summary: Returns true if the device has biometric hardware to perform iris authentication.
    type: Boolean
    platforms: [android]
    since: "12.1.0"

  - name: hasFingerprintScanner
    summary: Returns true if the device has biometric hardware to detect a fingerprint.
    type: Boolean
    platforms: [android]
    since: "12.1.0"

  - name: AUTHENTICATION_POLICY_BIOMETRICS_OR_WATCH
    summary: Device owner was authenticated using a biometric method or the Apple Watch.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    osver: {ios: {min: "13.0"}}
    since: "9.0.0"

  - name: AUTHENTICATION_POLICY_WATCH
    summary: Device owner was authenticated using the Apple Watch.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    osver: {ios: {min: "13.0"}}
    since: "9.0.0"

  - name: BIOMETRY_TYPE_NONE
    summary: The device does not support biometry.
    description: |
        Used as a return-value for <Modules.Identity.biometryType>.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    osver: {ios: {min: "11.0"}}
    since: "6.3.0"

  - name: BIOMETRY_TYPE_FACE_ID
    summary: The device supports Face ID.
    description: |
        Used as a return-value for <Modules.Identity.biometryType>.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    osver: {ios: {min: "11.0"}}
    since: "6.3.0"

  - name: BIOMETRY_TYPE_TOUCH_ID
    summary: The device supports Touch ID.
    description: |
        Used as a return-value for <Modules.Identity.biometryType>.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    osver: {ios: {min: "11.0"}}
    since: "6.3.0"

  - name: ERROR_AUTHENTICATION_FAILED
    summary: Constant indicating that the authentication was not successful.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]

  - name: ERROR_PASSCODE_NOT_SET
    summary: Constant indicating that the passcode is not set for the device.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_TOUCH_ID_NOT_AVAILABLE
    summary: |
        Constant indicating that Touch ID is not available on the device.
        Note: This constant has been deprecated for iOS 11 and later. Use
        <Modules.Identity.ERROR_BIOMETRY_NOT_AVAILABLE> for apps targeting iOS 11
        and later.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    deprecated:
        since: "10.0.0"
        notes: Use <Modules.Identity.ERROR_BIOMETRY_NOT_AVAILABLE> instead.

  - name: ERROR_TOUCH_ID_NOT_ENROLLED
    summary: |
        Constant indicating that Touch ID does not have any enrolled fingerprints.
        Note: This constant has been deprecated for iOS 11 and later. Use
        <Modules.Identity.ERROR_BIOMETRY_NOT_ENROLLED for apps targeting iOS 11
        and later.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    deprecated:
        since: "10.0.0"
        notes: Use <Modules.Identity.ERROR_BIOMETRY_NOT_ENROLLED> instead.

  - name: ERROR_SYSTEM_CANCEL
    summary: |
        Constant indicating that iOS cancelled authentication, for example, if another
        application enters the foreground.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_USER_CANCEL
    summary: Constant indicating that the user canceled authentication.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_USER_FALLBACK
    summary: Constant indicating that the user tapped the fallback button to enter their passcode.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_APP_CANCELLED
    summary: Constant indicating that the app cancelled authentication.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_INVALID_CONTEXT
    summary: Constant indicating that there is an invalid context.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_TOUCH_ID_LOCKOUT
    summary: |
         Constant indicating that Touch ID has locked out.
         Note: This constant has been deprecated for iOS 11 and later. Use
         <Modules.Identity.ERROR_BIOMETRY_LOCKOUT> for apps targeting iOS 11
         and later.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    deprecated:
        since: "10.0.0"
        notes: This constant has deprecated in iOS. Use <Modules.Identity.ERROR_BIOMETRY_LOCKOUT> instead.

  - name: ERROR_BIOMETRY_LOCKOUT
    summary: |
        Authentication was not successful, because there were too many failed biometry
        attempts and biometry is now locked. Passcode is required to unlock biometry,
        e.g. evaluating <Modules.Identity.authenticate> will ask for passcode as a prerequisite.
    since: "6.3.0"
    type: Number
    osver: {ios: {min: "11.0"}}
    permission: read-only

  - name: ERROR_BIOMETRY_NOT_AVAILABLE
    summary: Authentication could not start, because biometry is not available on the device.
    since: "6.3.0"
    type: Number
    osver: {ios: {min: "11.0"}}
    permission: read-only

  - name: ERROR_BIOMETRY_NOT_ENROLLED
    summary: Authentication could not start, because biometry has no enrolled identities.
    since: "6.3.0"
    type: Number
    osver: {ios: {min: "11.0"}}
    permission: read-only
    platforms: [iphone, ipad]

  - name: ACCESSIBLE_WHEN_UNLOCKED
    summary: |
        Item data can only be accessed while the device is unlocked. This is
        recommended for items that only need be accesible while the application
        is in the foreground.  Items with this attribute will migrate to a new
        device when using encrypted backups.
    type: String
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESSIBLE_AFTER_FIRST_UNLOCK
    summary: |
        Item data can only be accessed once the device has been unlocked after
        a restart.  This is recommended for items that need to be accesible by
        background applications. Items with this attribute will migrate to a new
        device when using encrypted backups.
    type: String
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESSIBLE_ALWAYS
    summary: |
        Item data can always be accessed regardless of the lock state of the device.
        This is not recommended for anything except system use. Items with this
        attribute will migrate to a new device when using encrypted backups.
    description: |
        Value is a Number on Android, a String on iOS.
    type: [Number, String]
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESSIBLE_WHEN_PASSCODE_SET_THIS_DEVICE_ONLY
    summary: |
         Item data can only be accessed while the device is unlocked. This class
         is only available if a passcode is set on the device. This is recommended
         for items that only need to be accessible while the application is in the
         foreground. Items with this attribute will never migrate to a new
         device, so after a backup is restored to a new device, these items
         will be missing. No items can be stored in this class on devices
         without a passcode. Disabling the device passcode will cause all
         items in this class to be deleted.
    description: |
        Value is a Number on Android, a String on iOS.
    type: [Number, String]
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESSIBLE_WHEN_UNLOCKED_THIS_DEVICE_ONLY
    summary: |
        Item data can only be accessed while the device is unlocked. This is
        recommended for items that only need be accesible while the application
        is in the foreground. Items with this attribute will never migrate to a
        new device, so after a backup is restored to a new device, these items
        will be missing.
    type: String
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESSIBLE_AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY
    summary: |
        Item data can only be accessed once the device has been unlocked after a
        restart. This is recommended for items that need to be accessible by
        background applications. Items with this attribute will never migrate to
        a new device, so after a backup is restored to a new device these items
        will be missing.
    type: String
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESSIBLE_ALWAYS_THIS_DEVICE_ONLY
    summary: |
        Item data can always be accessed regardless of the lock state of the device.
        This option is not recommended for anything except system use. Items with
        this attribute will never migrate to a new device, so after a backup is
        restored to a new device, these items will be missing.
    description: |
        Value is a Number on Android, a String on iOS.
    type: [Number, String]
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESS_CONTROL_USER_PRESENCE
    summary: |
        User presence policy using Touch ID, Face ID or Passcode. Touch ID / Face ID does not have
        to be available or enrolled. Item is still accessible by Touch ID / Face ID even
        if fingers are added or removed.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESS_CONTROL_TOUCH_ID_ANY
    summary: |
        Constraint - Touch ID (any finger). Touch ID must be available and at least
        one finger must be enrolled. Item is still accessible by Touch ID even if
        fingers are added or removed.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESS_CONTROL_TOUCH_ID_CURRENT_SET
    summary: |
        Constraint - Touch ID from the set of currently enrolled fingers. Touch ID
        must be available and at least one finger must be enrolled. When fingers
        are added or removed, the item is invalidated.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESS_CONTROL_DEVICE_PASSCODE
    summary: Constraint - Device passcode.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: ACCESS_CONTROL_OR
    summary: |
        Constraint logic operation - When using more than one constraint, at least
        one of them must be satisfied.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESS_CONTROL_AND
    summary: |
        Constraint logic operation - When using more than one constraint, all must
        be satisfied.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESS_CONTROL_PRIVATE_KEY_USAGE
    summary: Create access control for private key operations (i.e. sign operation).
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

  - name: ACCESS_CONTROL_APPLICATION_PASSWORD
    summary: |
        Security: Application provided password for data encryption key generation.
        This is not a constraint but additional item encryption mechanism.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    since: "6.1.0"

---
name: IdentityAuthenticationType
platforms: [android, iphone, ipad]
summary: Dictionary passed to <Modules.Identity.authenticate>.
properties:
  - name: reason
    optional: false
    summary: |
        Message displayed in the authentication dialog describing why the
        application is requesting authentication. Android: The title of the dialog.
    type: String

  - name: reasonSubtitle
    optional: true
    summary: |
        Subtitle of the authentication dialog (2nd line).
    type: String
    platforms: [android]

  - name: reasonText
    optional: true
    summary: |
        Text of the authentication dialog (3rd line).
    type: String
    platforms: [android]

  - name: allowableReuseDuration
    summary: |
        Note: This property is iOS only!

        The time interval (in seconds) for accepting a successful Touch ID / Face ID device
        unlock (on the lock screen) from the past.  If the device  was successfully
        unlocked by Touch ID / Face ID within this time interval, then the biometric authentication
        on this context will succeed automatically and the reply block will be
        called without prompting user for authentication.

        The default value is 0, meaning that no previous TouchID unlock can be reused.

        This property is meant only for reusing biometric matches from the device
        lock screen. It does not allow reusing previous biometric matches in
        application or between applications.

        The maximum supported interval is 5 minutes and setting the value beyond
        5 minutes does not increase the accepted interval.
    type: Number
    since: "6.1.0"
    osver: {ios: {min: "9.0"}}

  - name: fallbackTitle
    summary: |
        Note: This property is iOS only!

        Allows fallback button title customization. A default localized title
        "Enter Password" is used when this property is left nil. If set to empty
        string, the button will be hidden.
    type: String
    since: "6.1.0"
    osver: {ios: {min: "10.0"}}

  - name: cancelTitle
    summary: |
        Allows cancel button title customization. A default localized title "Cancel"
        is used when this property is not defined or is set to empty string.
        Android: The default value will be "Cancel".
    type: String
    since: "6.1.0"
    platforms: [android, iphone, ipad]
    osver: {ios: {min: "10.0"}}

  - name: confirmationRequired
    summary: |
        Sets a hint to the system for whether to require user confirmation after
        authentication. For example, implicit modalities like face and iris are passive,
        meaning they don't require an explicit user action to complete authentication.
        See https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder#setConfirmationRequired(boolean)
    type: String
    since: "12.7.0"
    platforms: [android]

  - name: keepAlive
    summary: |
        Note: This property is iOS only!

        Determines whether the auth-context should be kept alive after authorizing
        with the TouchID-API and can be used to automatically terminate an auth-context
        after authorizing.

        Please note that calling `invalidate` will not be possible unless you
        have a valid auth-context, so you would decide whether to use `invalidate`
        to invalidate the context and release the auth-instance or use the `keepAlive`
        property inside `authenticate` to only terminate the context.

        Terminated contexts cannot be recovered and will be recreated with a new auth-context
        once `authenticate` is called again.
    type: Boolean
    since: "7.0.0"

  - name: callback
    optional: false
    summary: |
        Callback function executed after the authentication completes.
        The callback function is passed a dictionary with three properties:

          * `success` (Boolean): Set to true if authentication succeeded.
          * `error` (String): System error message.
          * `code` (Number): Module `ERROR_*` constant indicating the reason for the failure.
    type: Callback

---
name: DeviceCanAuthenticateResult
platforms: [android, iphone, ipad]
summary: Dictionary containing results for <Modules.Identity.deviceCanAuthenticate>.
since: {iphone: "3.4.0", ipad: "3.4.0", android: "5.4.0"}
properties:
  - name: canAuthenticate
    summary: Set to true if device is configured for Touch ID / Face ID authentication.
    type: Boolean

  - name: error
    summary: System error message if any.
    type: String

  - name: code
    summary: iOS only, Module `ERROR_*` constant indicating the reason for the failure if any.
    type: Number
